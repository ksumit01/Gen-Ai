Solution 1:
db.createCollection("Customers")

Solution 2:"
//I used Dummy data given by ChatGpt

 db.customers.insertMany([



  {
    _id: ObjectId("65128b599c53fd1a85b4b0fd"),
    name: 'John Doe',
    email: 'johndoe@example.com',
    address: '123 Main St',
    phone_number: '555-123-4567'
  },
  {
    _id: ObjectId("65128b599c53fd1a85b4b0fe"),
    name: 'Jane Smith',
    email: 'janesmith@example.com',
    address: '456 Elm St',
    phone_number: '555-987-6543'
  },
  {
    _id: ObjectId("65128c979c53fd1a85b4b100"),
    name: 'sumit kumar',
    email: 'ksumit@gmail.com',
    phone: '243443455',
    Address: 'New Delhi',
    address: 'New Delhi'
  },
  {
    _id: ObjectId("65128e219c53fd1a85b4b101"),
    name: 'rohit',
    email: 'rohit@gmail.com',
    phone: 1234567,
    Address: 'Bihar'
  },
  {
    _id: ObjectId("65128e6f9c53fd1a85b4b102"),
    name: 'test',
    email: 'test@example.com',
    address: '123 UK',
    phone_number: '555-123-4567'
  },
  {
    _id: ObjectId("65128e6f9c53fd1a85b4b103"),
    name: 'test1',
    email: 'test1@example.com',
    address: '45 Mp',
    phone_number: '555-987-6543'
  }
])


Solution 3:
db.Customers.find({})

solution 4:
db.Customers.find({}, { name: 1, email: 1, _id: 0 })

solution 5:
db.Customers.findOne({ _id: ObjectId("65128e6f9c53fd1a85b4b103") })

solution 6:
db.Customers.find({ name: /^A/ })

solution 7:
db.Customers.find({}).sort({ name: -1 })

solution 8:
db.Customers.updateOne({ _id: ObjectId("65128e6f9c53fd1a85b4b103") }, { $set: { address: "New Delhi" } })

solution 9:
db.Customers.find({}).sort({ _id: 1 }).limit(3)

solution 10:
db.Customers.deleteOne({ _id: ObjectId("65128e6f9c53fd1a85b4b103") })

solution 11:
db.Customers.count()

solution 12:
db.Customers.find({}).sort({ _id: 1 }).skip(2)


solution 13:
db.Customers.find({
  $and: [
    { _id: { $gt: ObjectId("65128e6f9c53fd1a85b4b103") } },
    { name: /^B/ }
  ]
})

solution 14:
db.Customers.find({
  $or: [
    { _id: { $lt: ObjectId("65128e6f9c53fd1a85b4b103") } },
    { name: /s$/ }
  ]
})

solution 15:
db.Customers.find({
  $or: [
    { phone_number: { $exists: false } },
    { phone_number: null }
  ]
})


Problem 16:
Prerequisite: Understand creating tables in SQL / collections in MongoDB
Problem: Create a Restaurants table / collection with the fields defined above
=>	 mydb.createCollection('customers')

Problem 17:
Prerequisite: Understand inserting data into SQL tables / MongoDB collections
Problem: Insert five rows / documents into the Restaurants table / collection with data of your choice.
=>	db.Restaurants.insertMany([
  {
    name: "Restaurant A",
    cuisine_type: "Italian",
    location: "New York",
    average_rating: 4.5,
    delivery_available: true
  },
  {
    name: "Restaurant B",
    cuisine_type: "Chinese",
    location: "San Francisco",
    average_rating: 4.2,
    delivery_available: false
  },
  {
    name: "Restaurant C",
    cuisine_type: "Mexican",
    location: "Los Angeles",
    average_rating: 4.7,
    delivery_available: true
  },
  {
    name: "Restaurant D",
    cuisine_type: "Indian",
    location: "Chicago",
    average_rating: 3.9,
    delivery_available: true
  },
  {
    name: "Restaurant E",
    cuisine_type: "Japanese",
    location: "Miami",
    average_rating: 4.8,
    delivery_available: false
  }
])

Problem 18:
Prerequisite: Understand how to order data in SQL / MongoDB
Problem: Write a query to fetch all restaurants, ordered by average_rating in descending order.
=>	db.Restaurants.find().sort({ average_rating: -1 })
Problem 19:
Prerequisite: Understand filtering with multiple conditions in SQL / MongoDB
Problem: Write a query to fetch all restaurants that offer delivery_available and have an average_rating of more than 4.
=>	db.Restaurants.find({$and: [{ delivery_available: true },{ average_rating: { $gt: 4 } }]})

Problem 20:
Prerequisite: Understand how to use NULL checks in SQL / MongoDB
Problem: Write a query to fetch all restaurants where the cuisine_type field is not set or is null.
=>	db.Restaurants.find( { $or: [{ cuisine_type: { $exists: false } },{ cuisine_type: null }] } )
Problem 21:
Prerequisite: Understand how to count rows / documents in SQL / MongoDB
Problem: Write a query to count the number of restaurants that have delivery_available.
=>	db.Restaurants.count({ delivery_available: true });

Problem 22:
Prerequisite: Understand using string patterns in SQL (LIKE clause) / using regex in MongoDB
Problem: Write a query to fetch all restaurants whose location contains 'New York'.
=>	db.Restaurants.find({ location: { $regex: /New York/i } });




Problem 23:
Prerequisite: Understand how to use the AVG function in SQL / MongoDB's aggregate functions
Problem: Write a query to calculate the average average_rating of all restaurants.
=>	db.Restaurants.aggregate( [ {$group: {_id: null,average_rating: { $avg: "$average_rating" }}} ] )
Problem 24:
Prerequisite: Understand how to limit results in SQL / MongoDB
Problem: Write a query to fetch the top 5 restaurants when ordered by average_rating in descending order.
=>	db.Restaurants.find().sort({ average_rating: -1 }).limit(5)

Problem 25:
Prerequisite: Understand data deletion in SQL / MongoDB
Problem: Write a query to delete the restaurant with id 3.
=>	db.Restaurants.deleteOne({ _id: ObjectId("3") })






